<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>SGBlog</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>sangeng-framework</module>
        <module>sangeng-admin</module>
        <module>sangeng-blog</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
    </properties>


<!--
对于继承了该pom的子项目：
    - 对于父项目中的dependencyManagement。dependencyManagement只是声明依赖，并不实现引入
        1. 如果子项目想从父项目中继承某个依赖，就需要在自己的pom文件中声明该依赖（写了依赖项，但不指定具体版本）
        2. 如果子项目的pom中指定了依赖的版本号，那么子项目就会引入指定的jar版本（和父项目的dependencyManagement没关系了）
    - 对于父项目的dependencies。dependencies为直接继承，即：子项目没指明版本的依赖，都会从父项目中继承
-->
    <dependencyManagement>
        <dependencies>
<!--    可曾听闻cmake里的findPackage——告诉cmake依赖的库去哪里找        -->
            <!-- SpringBoot的依赖配置-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>2.5.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--fastjson依赖-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>1.2.33</version>
            </dependency>
            <!--jwt依赖-->
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt</artifactId>
                <version>0.9.0</version>
            </dependency>
            <!--mybatisPlus依赖-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>3.4.3</version>
            </dependency>
            <!-- Spring-Mybatis -->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>1.3.2</version>
                <!--原Mybatis中需排除下面2个依赖（MP会导入mybatis的一些包，为了不和这些已导入的包冲突，需要在mybatis依赖中把这些包排除）-->
                <exclusions>
                    <exclusion>
                        <groupId>org.mybatis</groupId>
                        <artifactId>mybatis</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.mybatis</groupId>
                        <artifactId>mybatis-spring</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
             <!--分页插件 -->
            <dependency>
                <!-- 内存中分页，适合少量数据 -->
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>5.5.8</version>
            </dependency>
            <dependency>
                <!-- 物理分页，适合大量数据 -->
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>1.4.2</version>
                <!--需排除下面包-->
                <exclusions>
                    <exclusion>
                        <groupId>org.mybatis.spring.boot</groupId>
                        <artifactId>mybatis-spring-boot-starter</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <!--引入autoconfigure-->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-autoconfigure</artifactId>
                <version>2.2.0</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-configuration-processor</artifactId>
                <version>2.7.2</version>
                <optional>true</optional>
            </dependency>

            <!--阿里云OSS-->
            <dependency>
                <groupId>com.aliyun.oss</groupId>
                <artifactId>aliyun-sdk-oss</artifactId>
                <version>3.10.2</version>
            </dependency>
            <!-- 七牛云 -->
            <dependency>
              <groupId>com.qiniu</groupId>
              <artifactId>qiniu-java-sdk</artifactId>
              <version>[7.7.0, 7.10.99]</version>
            </dependency>

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>easyexcel</artifactId>
                <version>3.0.5</version>
            </dependency>

            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger2</artifactId>
                <version>2.9.2</version>
            </dependency>
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger-ui</artifactId>
                <version>2.9.2</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

<!--    &lt;!&ndash;  构建项目时所需的信息  &ndash;&gt;-->
<!--    <build>-->
<!--        <plugins>-->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-compiler-plugin</artifactId>-->
<!--                <version>3.1</version>-->
<!--                <configuration>-->
<!--                    <source>${java.version}</source>-->
<!--                    <target>${java.version}</target>-->
<!--                    <encoding>${project.build.sourceEncoding}</encoding>-->
<!--                </configuration>-->
<!--            </plugin>-->

<!--        </plugins>-->
<!--    </build>-->

<!--    &lt;!&ndash;发现依赖和扩展的远程仓库列表。&ndash;&gt;-->
<!--    <repositories>-->
<!--        <repository>-->
<!--            <id>spring-releases</id>-->
<!--            <url>https://repo.spring.io/libs-release</url>-->
<!--        </repository>-->
<!--    </repositories>-->
<!--     &lt;!&ndash;发现插件的远程仓库列表，这些插件用于构建和报表&ndash;&gt;-->
<!--    <pluginRepositories>-->
<!--        <pluginRepository>-->
<!--            <id>spring-releases</id>-->
<!--            <url>https://repo.spring.io/libs-release</url>-->
<!--        </pluginRepository>-->
<!--    </pluginRepositories>-->
</project>